<?xml version="1.0" encoding="UTF-8"?>
<Shell xmlns="http://xamarin.com/schemas/2014/forms" 
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:HomeInventory.Views"
       Title="HomeInventory"
       x:Class="HomeInventory.AppShell"
       DisabledColor="#D3D3D3"
       BackgroundColor="{AppThemeBinding Light={StaticResource ElevatedBackgroundLight}, Dark={StaticResource ElevatedBackgroundDark}}"
       Shell.ForegroundColor="{AppThemeBinding Light={StaticResource ForegroundLight}, Dark={StaticResource ForegroundDark}}"
       FlyoutBackgroundColor="{AppThemeBinding Light={StaticResource ElevatedBackgroundLight}, Dark={StaticResource ElevatedBackgroundDark}}"
       Shell.TitleColor="{AppThemeBinding Light={StaticResource ForegroundLight}, Dark={StaticResource ForegroundDark}}"
       Shell.TabBarForegroundColor="{AppThemeBinding Light={StaticResource ForegroundLight}, Dark={StaticResource ForegroundDark}}"
       Shell.TabBarTitleColor="{AppThemeBinding Light={StaticResource ForegroundLight}, Dark={StaticResource ForegroundDark}}"
       Shell.TabBarBackgroundColor="{AppThemeBinding Light={StaticResource ElevatedBackgroundLight}, Dark={StaticResource ElevatedBackgroundDark}}">
    <!--
        The overall app visual hierarchy is defined here, along with navigation.
    
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->

    <Shell.Resources>
        <ResourceDictionary>
            <Style x:Key="BaseStyle" TargetType="{x:Type Element}">
                <Setter Property="Shell.BackgroundColor" Value="{AppThemeBinding Light={StaticResource ElevatedBackgroundLight}, Dark={StaticResource ElevatedBackgroundDark}}" />
                <Setter Property="Shell.ForegroundColor" Value="White" />
                <Setter Property="Shell.TitleColor" Value="White" />
                <Setter Property="Shell.DisabledColor" Value="#D3D3D3" />
                <Setter Property="Shell.UnselectedColor" Value="#D3D3D3" />
                <Setter Property="Shell.TabBarBackgroundColor" Value="{AppThemeBinding Light={StaticResource ElevatedBackgroundLight}, Dark={StaticResource ElevatedBackgroundDark}}" />
                <Setter Property="Shell.TabBarForegroundColor" Value="White"/>
                <Setter Property="Shell.TabBarUnselectedColor" Value="#D3D3D3"/>
                <Setter Property="Shell.TabBarTitleColor" Value="White"/>
            </Style>
            
            <!--<Style TargetType="TabBar" BasedOn="{StaticResource BaseStyle}" ApplyToDerivedTypes="True">
            </Style>-->
            <!--<Style TargetType="FlyoutItem" BasedOn="{StaticResource BaseStyle}" />-->
            <!--<Style TargetType="FlyoutItem">
                <Setter Property="Shell.ForegroundColor" Value="White" />
            </Style>-->
            <!--
            Default Styles for all Flyout Items
            https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
            -->
            
            <Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{x:OnPlatform UWP=Transparent, iOS=Transparent, Android=Transparent}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{StaticResource Highlight}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <Style Class="FlyoutItemLabelStyle" TargetType="Label" ApplyToDerivedTypes="True">
                <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource ForegroundLight}, Dark={StaticResource ForegroundDark}}"/>
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="TextColor" Value="{StaticResource HighlightedForeground}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Shell.Resources>

    <Shell.FlyoutHeader>
        <StackLayout>
            <Label Text="Home Inventory" FontSize="24" HeightRequest="100" FontAttributes="Bold" VerticalTextAlignment="Center" HorizontalTextAlignment="Center"/>
            <BoxView Style="{StaticResource CardSeparator}"/>
        </StackLayout>
    </Shell.FlyoutHeader>
    
    <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->
    <FlyoutItem Title="Inventory Taking">
        <ShellContent Route="InventoryTaking" ContentTemplate="{DataTemplate local:InventoryTakingPage}" />
    </FlyoutItem>
    <FlyoutItem Title="Stock">
        <ShellContent Route="StockPage" ContentTemplate="{DataTemplate local:StockPage}" />
    </FlyoutItem>
    <FlyoutItem Title="Products">
        <ShellContent Route="ProductsPage" ContentTemplate="{DataTemplate local:ProductsPage}" />
    </FlyoutItem>
    <FlyoutItem Title="Settings">
        <ShellContent Route="SettingsPage" ContentTemplate="{DataTemplate local:SettingsPage}" />
    </FlyoutItem>


    <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->

    <!--<MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked"/>-->

    <!--
        TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where 
        you don't want users to be able to navigate away from. If you would like to navigate to this 
        content you can do so by calling 
        await Shell.Current.GoToAsync("//LoginPage");
    -->
    <TabBar>
        <ShellContent Route="ProductPage" ContentTemplate="{DataTemplate local:ProductPage}" />
    </TabBar>

    <!-- Optional Templates 
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

    -->

</Shell>
