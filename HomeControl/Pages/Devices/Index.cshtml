@page
@using HomeControl.Integrations
@model HomeControl.Pages.Devices.IndexModel
@{
	Layout = "MenuPage_Layout";
	ViewData["Title"] = "Devices";
}

@section Dialogs {
	<dialog id="ChangaDisplayNameDialog" onclose="changeDisplayNameDialogClosed()">
		<form method="post" class="grid card-padding" asp-page-handler="Rename">
			<input id="DeviceId" type="hidden" name="DeviceId" />
			<div class="grid">
				<label for="DisplayName">Name</label>
				<input id="DisplayName" name="DisplayName" />
			</div>
			<div class="flex" style="justify-content: right">
				<button class="shadow-2">Rename</button>
				<button class="shadow-2" type="button" onclick="closeChangeDisplayNameDialog()">Cancel</button>
			</div>
		</form>
	</dialog>
}

@section Scripts {
	<script>
		var changeDisplayNameDialog = document.getElementById("ChangaDisplayNameDialog");

		var deviceIdInput = document.getElementById("DeviceId");

		var displayNameInput = document.getElementById("DisplayName");
		
		function openChangeDisplayNameDialog(deviceId, displayName) {
			deviceIdInput.value = deviceId;
			displayNameInput.value = displayName;

			showDialog(changeDisplayNameDialog);
		}

		function closeChangeDisplayNameDialog() {
			closeDialog(changeDisplayNameDialog);
		}

		function changeDisplayNameDialogClosed() {
			deviceIdInput.value = null;
			displayNameInput.value = null;
		}
	</script>
}

<div class="grid body-content">
	<div class="card shadow-2 card-a-container">
		<a class="card-a" asp-page="ManageDevices">
			<div class="grid-1fr-auto card-padding">
				<div class="centered-content">
					<b>Manage Devices</b>
				</div>

				<div class="centered-content">
					<img src="~/svg/arrow-right.svg" />
				</div>
			</div>
		</a>
	</div>

	<h2 class="lesser">TP-Link Devices</h2>

	@{
		foreach (var device in Model.Devices.OrderBy(x => x.DisplayName))
		{
			<form method="post" class="card shadow-2">
				<details>
					<summary>
						<div class="grid card-padding medium-gap" style="grid-template-columns: 1fr auto auto">
							<div class="centered-content">
								<b>@device.DisplayName</b>
							</div>

							<div class="flex">
								@{
									foreach (var feature in device.GetExecutableFeatures())
									{
										<button class="shadow-2" asp-page-handler="ExecuteFeature" asp-all-route-data="@Model.GetDeviceFeatureRouteData(device, feature)">@feature.Name</button>
									}
								}
							</div>
							<div class="centered-content">
								<img class="summary-marker" src="~/svg/arrow-down.svg"/>
								<img class="summary-marker-open" src="~/svg/arrow-up.svg"/>
							</div>
						</div>
					</summary>
					@{
						if (device.SupportsRename)
						{
							<div class="card-element grid-1fr-auto card-padding">
								<div class="centered-content">
									<span class="field-label">Name:</span>
									<span>@device.DisplayName</span>
								</div>
								<button class="shadow-2" type="button" onclick="openChangeDisplayNameDialog(@Json.Serialize(device.Owner.Id), '@device.DisplayName')">Rename</button>
							</div>
						}
					}
					<div class="grid-1-2 card-padding">
						@{
							void DisplayChildProperty(IProperty property)
							{
								switch (property)
								{
									case PlaceholderProperty:
										<div></div>
										break;
									case SingleProperty singleProperty:
										<span style="word-break: break-all">@singleProperty.Value</span>
										<span class="field-label">@singleProperty.Label</span>

										break;
									case MultiProperty multiProperty:
										<span class="field-label">@multiProperty.Label</span>

										foreach (var childProperty in multiProperty.ChildProperties)
										{
											DisplayChildProperty(childProperty);
										}

										break;
								}
							}

							void DisplayProperty(IProperty property)
							{
								switch (property)
								{
									case PlaceholderProperty:
										<div></div>
										break;
									case SingleProperty singleProperty:
										<div style="overflow: hidden; text-overflow: ellipsis">
											<span class="field-label">@singleProperty.Label</span>
											<span>@singleProperty.Value</span>
										</div>

										break;
									case MultiProperty multiProperty:
										<div>
											<span class="field-label">@multiProperty.Label</span>
											@{
												foreach (var childProperty in multiProperty.ChildProperties)
												{
													DisplayChildProperty(childProperty);
												}
											}
										</div>

										break;
								}
							}

							foreach (var property in device.GetProperties())
							{
								DisplayProperty(property);
							}
						}
					</div>
				</details>
			</form>
		}
	}
</div>