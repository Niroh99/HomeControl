@page "{DeviceOptionId}"
@using HomeControl.Views.Shared
@using Microsoft.AspNetCore.Mvc.Razor
@model HomeControl.Pages.Devices.EditDeviceOptionModel
@{
	Layout = "MenuPage_Layout";
	ViewData["Title"] = "Edit Device Option";

	var newDeviceOptionActionDataInformation = new Dictionary<string, DatabaseModels.DeviceActionData>();

	foreach (var actionTypeMapItem in Integrations.IDeviceService.DeviceOptionActionTypeDataMap)
	{
		var actionData = (DatabaseModels.DeviceActionData)Activator.CreateInstance(actionTypeMapItem.Value);

		actionData.DeviceId = Model.ViewModel.Device.Id;

		newDeviceOptionActionDataInformation[actionTypeMapItem.Key.ToString()] = actionData;
	}

	var newDeviceOptionActionDataInformationJson = Json.Serialize(newDeviceOptionActionDataInformation);

	void RenderActionCommands()
	{
		<button class="shadow-2" onclick="showDialogById('CreateDeviceOptionActionDialog')">Create Action</button>
	}
}

@section Dialogs {
	<dialog id="ChangeDeviceOptionNameDialog">
		<form method="post" class="grid card-padding" asp-page-handler="Rename">
			<div class="grid">
				<label for="DeviceOptionName">Name</label>
				<input id="DeviceOptionName" name="DeviceOptionName" class="bound" data-binding-value="deviceOption.name" />
			</div>
			<div class="flex" style="justify-content: right">
				<button class="shadow-2">Rename</button>
				<button class="shadow-2" type="button" onclick="closeDialogById('ChangeDeviceOptionNameDialog')">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="RemoveDeviceOptionQuestionDialog">
		<div class="grid padded">
			<div>
				<span>Remove</span>
				<span class="bound" data-binding-inner="deviceOption.name"></span><span>?</span>
			</div>
			<form class="flex" style="justify-content: right" method="post" asp-page-handler="RemoveDeviceOption">
				<button>Remove</button>
				<button type="button" onclick="closeDialogById('RemoveDeviceOptionQuestionDialog')">Cancel</button>
			</form>
		</div>
	</dialog>

	<dialog id="CreateDeviceOptionActionDialog">
		<form id="CreateDeviceOptionAction" method="post" class="grid card-padding" asp-page-handler="CreateDeviceOptionAction">
			<input hidden id="NewDeviceOptionActionData" name="NewDeviceOptionActionData" />
			<div class="grid">
				<label for="DeviceOptionActionType">Name</label>
				<custom-select asp-items="Model.ViewModel.DeviceOptionActionTypes" id="DeviceOptionActionType" name="DeviceOptionActionType" onchange="deviceOptionActionTypeChanged()"></custom-select>
				@await Html.PartialAsync("EditDeviceOptionActionData", new EditDeviceOptionActionDataModel(Model.ViewModel.Device, Model.ViewModel.IntegrationDevice, Model.ViewModel.DeviceOption, "DeviceOptionActionEditor"))
			</div>
			<div class="flex" style="justify-content: right">
				<button type="button" onclick="submitCreateDeviceOptionActionForm()">Create</button>
				<button type="button" onclick="closeDialogById('CreateDeviceOptionActionDialog')">Cancel</button>
			</div>
		</form>
	</dialog>

	<dialog id="RemoveDeviceOptionActionQuestionDialog">
		<div class="grid padded">
			<span>Remove Action?</span>
			<form class="flex" style="justify-content: right" method="post" asp-page-handler="RemoveDeviceOptionAction">
				<input hidden id="ActionIdToRemove" name="ActionIdToRemove" />
				<button>Remove</button>
				<button type="button" onclick="closeDialogById('RemoveDeviceOptionActionQuestionDialog')">Cancel</button>
			</form>
		</div>
	</dialog>
}

@section Commands {
	<div class="flex-vertical">
		@{
			RenderActionCommands();
		}
	</div>
}

@section Scripts {
	<script src="~/js/Devices/EditDeviceOption.js"></script>
	<script>
		var newDeviceOptionDataInformation = @newDeviceOptionActionDataInformationJson
	</script>
}

<div class="grid body-content">
	@if (Model.ViewModel.DeviceOption == null)
	{
		<h2 class="lesser">Unknown Device Option</h2>
	}
	else
	{
		<h2 class="lesser bound" data-binding-inner="deviceOption.name"></h2>

		<div class="card card-children-separator">
			<card-element class="card-padding" header="Execute">
				<button onclick="executePageHandler('Execute')">Execute</button>
			</card-element>
			<!card-element class="card-padding centered-content bound" data-binding-header="deviceOption.name">
			<div class="centered-content">
				<span class="field-label">Name:</span>
				<strong Name="Header"></strong>
			</div>
			<button onclick="showDialogById('ChangeDeviceOptionNameDialog')">Rename</button>
			</!card-element>
			<card-element class="card-padding" header="Remove">
				<button onclick="showDialogById('RemoveDeviceOptionQuestionDialog')">Remove</button>
			</card-element>
		</div>

		<h5 class="lesser">Actions</h5>

		<div class="flex medium-to-large-display">
			@{
				RenderActionCommands();
			}
		</div>

		if (Model.ViewModel.DeviceOptionActions.Count == 0)
		{
			<h4 class="lesser">No Actions</h4>
		}
		else
		{
			<div class="card card-children-separator">
				@for (int i = 0; i < Model.ViewModel.DeviceOptionActions.Count; i++)
				{
					var deviceOptionAction = Model.ViewModel.DeviceOptionActions[i];

					<card-element class="card-padding bound" data-binding-header="deviceOptionActions[@(i)].display">
						<button onclick="openRemoveDeviceOptionActionQuestionDialog('@deviceOptionAction.Id')">Remove</button>
					</card-element>
				}
			</div>
		}
	}
</div>