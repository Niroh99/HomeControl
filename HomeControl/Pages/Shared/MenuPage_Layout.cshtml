@using HomeControl.Attributes
@using HomeControl.Views.Shared
@using System.Reflection
@using Microsoft.AspNetCore.Mvc.RazorPages
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@model PageModel
@{
	var pageModelType = (Type)Model.GetType();

	var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<title>@ViewData["Title"] - HomeControl</title>
	<link rel="stylesheet" href="~/css/BaseResources.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/css/DarkTheme.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/css/HtmlTags.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/css/MainMenu.css" asp-append-version="true" />
	<link rel="stylesheet" href="~/css/Breadcrumb.css" asp-append-version="true" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>
<body>
	<input id="RequestVerificationToken" type="hidden" value="@requestToken" />
	<header class="shadow-4 centered-content">
		<div class="centered-content" style="display: grid; grid-template-columns: auto 1fr">
			<div class="title-displacer">
				<button id="main-menu-button" class="empty" onclick="ToggleMainMenu()">
					<img src="~/svg/TitleHamburger.svg" />
				</button>
			</div>
			<div class="padded-medium" style="grid-column: 2">
				<div class="title-container">
					@{
						var menuPageAttribute = pageModelType.GetCustomAttribute<MenuPageAttribute>();

						if (menuPageAttribute != null)
						{
							List<Breadcrumb> breadcrumbs = [new Breadcrumb(menuPageAttribute.MenuItem, null, "h1", "lesser")];

							if (menuPageAttribute.ParentPageType != null)
							{
								menuPageAttribute = menuPageAttribute.ParentPageType.GetCustomAttribute<MenuPageAttribute>();

								if (menuPageAttribute != null)
								{
									do
									{
										breadcrumbs.Insert(0, new Breadcrumb(menuPageAttribute.MenuItem, menuPageAttribute.Url, "h1", "lesser"));

										menuPageAttribute = menuPageAttribute.ParentPageType?.GetCustomAttribute<MenuPageAttribute>();
									}
									while (menuPageAttribute != null);
								}
							}

							var breadcrumbModel = new BreadcrumbModel("TitleBreadcrumb", ">", ["h1", "lesser"]);

							breadcrumbModel.Breadcrumbs.AddRange(breadcrumbs);

							@await Html.PartialAsync("Breadcrumb", breadcrumbModel)
						}
						else
						{
							<h1 class="lesser">@ViewData["Title"]</h1>
						}
					}
				</div> 
			</div>
		</div>
	</header>
	<main role="main">
		<div id="main-menu-container">
			<div id="body-container">
				@RenderBody()
			</div>
			<button id="small-display-commands-overlay-button" class="overlay-button hidden" onclick="toggleSmallCommandsDisplay()"></button>
			@if (IsSectionDefined("Commands"))
			{
				<div id="small-display-commands-section" class="grid-layer-item fade-in">
					<div class="flex flex-vertical" style="justify-content: space-between">
						<div id="small-display-commands-container" class="hidden">
							@await RenderSectionAsync("Commands", false)
						</div>
						<button id="small-display-commands-toggle-button" class="shadow-4" onclick="toggleSmallCommandsDisplay()">
							<img src="~/svg/Plus.svg" />
						</button>
					</div>
				</div>
			}
			<button id="main-menu-overlay" class="main-menu-component overlay-button hidden" onclick="ToggleMainMenu()"></button>
			<div id="main-menu" class="main-menu-component flex flex-vertical hidden">
				@{
					Helpers.MainMenuHelper.TryGetRootMenuItem(pageModelType, out var selectedRootMenuItem);

					foreach (var menuItem in Helpers.MainMenuHelper.MenuItems)
					{
						string menuItemClasses = "menu-item grid fade-in";

						if (menuItem == selectedRootMenuItem) menuItemClasses += " highlighted-menu-item shadow-2";

						<div class="@menuItemClasses">
							<a class="menu-item-a padded" asp-area="" asp-page="@menuItem.Url">
								<h5>@menuItem.Name</h5>
							</a>
						</div>
					}
				}
			</div>
		</div>
	</main>

	<div id="busy-overlay" class="overlay background40 grid hidden">
		<div class="card padded shadow-2 centered-content" style="margin: auto; min-width: 100px">
			<span id="BusyMessage"></span>
		</div>
	</div>

	<div id="dialog-overlay" class="overlay grid hidden">
		<button class="overlay-button" onclick="closeAllDialogs()" style="grid-column: 1; grid-row: 1;"></button>

		@await RenderSectionAsync("Dialogs", false)
	</div>

	@if (Model is ViewModelPageModelBase viewModelPage)
	{
		<script>
			var model = @(Json.Serialize(viewModelPage.ViewModelBase))
		</script>
	}

	<script src="~/lib/jquery/dist/jquery.min.js"></script>
	<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
	<script src="~/js/mainMenu.js" asp-append-version="true"></script>
	<script src="~/js/dialog.js" asp-append-version="true"></script>
	<script src="~/js/busy.js" asp-append-version="true"></script>
	<script src="~/js/Breadcrumb.js"></script>
	<script src="~/js/commands.js"></script>
	<script src="~/js/Binding.js"></script>
	<script src="~/js/cardElement.js"></script>
	<script src="~/js/site.js" asp-append-version="true"></script>

	@await RenderSectionAsync("Scripts", required: false)
</body>
</html>