@page
@using HomeControl.Views.Shared
@model HomeControl.Pages.Media.IndexModel
@{
	Layout = "MenuPage_Layout";
	ViewData["Title"] = "Media";

	void RenderCommands(bool vertically)
	{
		List<string> containerClasses = ["flex"];

		if (vertically) containerClasses.Add("flex-vertical");

		<div class="@string.Join(' ', containerClasses)">
			<button class="shadow-2" onclick="showDialogById('UploadFileDialog')">Upload File</button>
			<button class="shadow-2" onclick="showDialogById('CreateDirectoryDialog')">Create Directory</button>

			@if (Model.DirectorySelected)
			{
				<button class="shadow-2" onclick="showDialogById('RenameDirectoryDialog')">Rename Directory</button>
			}
		</div>
	}
}

@section Dialogs {
	@if (Model.MediaSelected)
	{
		<dialog id="UploadFileDialog">
			<form id="UploadFileForm" action="/Media/UploadFile?directoryPath=@Model.CurrentDirectoryPath" method="post" enctype="multipart/form-data" class="grid card-padding">
				<div class="grid">
					<label for="File">File</label>
					<input type="file" id="File" name="file" />
				</div>
				<div class="flex" style="justify-content: right">
					<button class="shadow-2" type="button" onclick="submitUploadFileForm()">Upload</button>
					<button class="shadow-2" type="button" onclick="closeDialogById('UploadFileDialog')">Cancel</button>
				</div>
			</form>
		</dialog>

		<dialog id="DeleteFileDialog">
			<form method="post" class="grid card-padding" asp-page-handler="DeleteFile">
				<input type="hidden" id="FileToDelete" name="filename" />
				<input type="hidden" name="directoryPath" value="@Model.CurrentDirectoryPath" />
				<span>Delete File?</span>
				<div class="flex" style="justify-content: right">
					<button class="shadow-2">Delete</button>
					<button class="shadow-2" type="button" onclick="closeDialogById('DeleteFileDialog')">Cancel</button>
				</div>
			</form>
		</dialog>

		<dialog id="CreateDirectoryDialog">
			<form method="post" class="grid card-padding" asp-page-handler="CreateDirectory">
				<input type="hidden" name="directoryPath" value="@Model.CurrentDirectoryPath" />
				<div class="grid">
					<label for="File">Directory</label>
					<input id="DirectoryToCreate" name="Directory" />
				</div>
				<div class="flex" style="justify-content: right">
					<button class="shadow-2">Create</button>
					<button class="shadow-2" type="button" onclick="closeDialogById('CreateDirectoryDialog')">Cancel</button>
				</div>
			</form>
		</dialog>

		if (Model.DirectorySelected)
		{
			<dialog id="RenameDirectoryDialog">
				<form method="post" class="grid card-padding" asp-page-handler="RenameDirectory">
					<input type="hidden" name="directoryPath" value="@Model.CurrentDirectoryPath" />
					<div class="grid">
						<label for="NewDirectoryName">Directory</label>
						<input id="newDirectoryName" name="newDirectoryName" value="@Model.CurrentDirectory.Name" />
					</div>
					<div class="flex" style="justify-content: right">
						<button class="shadow-2">Rename</button>
						<button class="shadow-2" type="button" onclick="closeDialogById('RenameDirectoryDialog')">Cancel</button>
					</div>
				</form>
			</dialog>
		}
	}
}

@section Scripts {
	@{
		if (Model.MediaSelected)
		{
			<script>
				function submitUploadFileForm() {

				closeDialogById('UploadFileDialog')

				BusyWithMessage("Uploading File...");

				let uploadFileForm = document.getElementById("UploadFileForm");

				uploadFileForm.submit();
				}

				function showDeleteFileDialog(filename) {
				let fileToDeleteField = document.getElementById("FileToDelete");

				fileToDeleteField.value = filename;

				showDialogById("DeleteFileDialog");
				}
			</script>
		}
	}
}

@section Commands {
	@{
		RenderCommands(true);
	}
}

<div class="body-content grid">
	@if (Model.BasePathExists)
	{
		if (Model.MediaSelected)
		{
			<div class="medium-to-large-display">
				@{
					RenderCommands(false);
				}
			</div>

			var breadcrumbModel = new BreadcrumbModel("MediaBreadcrumb", "/", ["h3"]);

			foreach (var breadcrumb in Model.GetBreadcrumbs().Reverse())
			{
				breadcrumbModel.Breadcrumbs.Add(breadcrumb);
			}

			@await Html.PartialAsync("Breadcrumb", breadcrumbModel)
		}

		if (Model.CurrentDirectoryExists)
		{
			if (Model.HasMedia)
			{
				if (Model.Directories.Any())
				{
					if (Model.MediaSelected)
					{
						<h4>Directories</h4>
					}

					foreach (var directory in Model.Directories)
					{
						<div class="card card-a-container shadow-2">
							<a class="card-a" asp-route-MediaDirectoryPath="@Model.CurrentDirectoryPath" asp-route-MediaNavigateDirectory="@directory.Name">
								<div class="grid card-padding" style="grid-template-columns: auto 1fr auto">
									<div class="centered-content">
										<img src="~/svg/directory.svg" />
									</div>
									<b>@directory.Name</b>

									<div class="centered-content">
										<img src="~/svg/arrow-right.svg" />
									</div>
								</div>
							</a>
						</div>
					}
				}

				if (Model.Files.Any())
				{
					<h4>Files (@(Model.Files.Count)) - @(Model.FileSizeDisplay(Model.Files.Sum(x => x.Length)))</h4>

					foreach (var file in Model.Files)
					{
						var canBrowserDisplayFile = Model.CanBrowserDisplayFile(file);

						<div class="card shadow-2">
							<details>
								<summary>
									<div class="card grid card-padding" style="grid-template-columns: 1fr auto auto">
										<div class="centered-content">
											<div style="display: grid; grid-template-columns: auto auto 1fr">
												<b style="text-overflow: ellipsis; overflow: hidden">@System.IO.Path.GetFileNameWithoutExtension(file.Name)</b>
												<b>@System.IO.Path.GetExtension(file.Name)</b>
											</div>
											<span class="lesser" style="font-size: 12px">@Model.FileSizeDisplay(file.Length)</span>
										</div>

										<div class="flex centered-content">
											@if (canBrowserDisplayFile)
											{
												<a class="button-a shadow-2" href="@Model.BuildFileQuery(file.Name)">Open</a>
											}
											else
											{
												<a class="button-a shadow-2" href="@Model.BuildFileQuery(file.Name)" download="@file.Name">Download</a>
											}
										</div>
										<div class="centered-content">
											<img class="summary-marker" src="~/svg/arrow-down.svg" />
											<img class="summary-marker-open" src="~/svg/arrow-up.svg" />
										</div>
									</div>
								</summary>
								@if (canBrowserDisplayFile)
								{
									<div class="card-element grid-1fr-auto card-padding">
										<div class="centered-content">
											<b>Download</b>
										</div>
										<a class="button-a shadow-2" href="@Model.BuildFileQuery(file.Name)" download="@file.Name">Download</a>
									</div>
								}
								<div class="card-element grid-1fr-auto card-padding">
									<div class="centered-content">
										<b>Delete</b>
									</div>
									<button class="shadow-2" onclick="showDeleteFileDialog('@file.Name')">Delete</button>
								</div>
							</details>
						</div>
					}
				}
			}
			else
			{
				<h2 class="lesser">Directory empty</h2>
			}
		}
		else
		{
			<h2 class="lesser">Unknown Directory</h2>
		}
	}
	else
	{
		<h2 class="lesser">No Media attached</h2>
	}
</div>